

def BinomialHeapImp.combine._at.mkHeap._spec_3 (x_1 : obj) (x_2 : obj) : obj :=
  case x_2 : obj of
  BinomialHeapImp.HeapNodeAux.mk →
    let x_3 : obj := proj[0] x_2;
    let x_4 : obj := proj[1] x_2;
    let x_5 : obj := proj[2] x_2;
    case x_1 : obj of
    BinomialHeapImp.HeapNodeAux.mk →
      let x_6 : obj := proj[0] x_1;
      let x_7 : obj := proj[1] x_1;
      let x_8 : obj := proj[2] x_1;
      let x_9 : u8 := Nat.decLt x_3 x_6;
      case x_9 : obj of
      Bool.false →
        let x_10 : obj := 1;
        let x_11 : obj := Nat.add x_7 x_10;
        let x_12 : obj := ctor_0[List.nil];
        let x_13 : obj := ctor_1[List.cons] x_2 x_12;
        let x_14 : obj := ctor_1[BinomialHeapImp.Heap.heap] x_13;
        let x_15 : obj := ctor_1[List.cons] x_14 x_12;
        let x_16 : obj := List.append._rarg x_8 x_15;
        let x_17 : obj := ctor_0[BinomialHeapImp.HeapNodeAux.mk] x_6 x_11 x_16;
        ret x_17
      Bool.true →
        let x_18 : obj := 1;
        let x_19 : obj := Nat.add x_4 x_18;
        let x_20 : obj := ctor_0[List.nil];
        let x_21 : obj := ctor_1[List.cons] x_1 x_20;
        let x_22 : obj := ctor_1[BinomialHeapImp.Heap.heap] x_21;
        let x_23 : obj := ctor_1[List.cons] x_22 x_20;
        let x_24 : obj := List.append._rarg x_5 x_23;
        let x_25 : obj := ctor_0[BinomialHeapImp.HeapNodeAux.mk] x_3 x_19 x_24;
        ret x_25
def BinomialHeapImp.mergeNodes._main._at.mkHeap._spec_2 (x_1 : obj) (x_2 : obj) : obj :=
  case x_1 : obj of
  List.nil →
    ret x_2
  List.cons →
    let x_3 : obj := proj[0] x_1;
    let x_4 : obj := proj[1] x_1;
    case x_2 : obj of
    List.nil →
      ret x_1
    List.cons →
      let x_5 : obj := proj[0] x_2;
      let x_6 : obj := proj[1] x_2;
      let x_7 : obj := proj[1] x_3;
      let x_8 : obj := proj[1] x_5;
      let x_9 : u8 := Nat.decLt x_7 x_8;
      case x_9 : obj of
      Bool.false →
        let x_10 : u8 := Nat.decLt x_8 x_7;
        case x_10 : obj of
        Bool.false →
          let x_11 : obj := BinomialHeapImp.combine._at.mkHeap._spec_3 x_3 x_5;
          let x_12 : obj := proj[1] x_11;
          let x_13 : obj := BinomialHeapImp.hRank._rarg x_4;
          let x_14 : u8 := Nat.decEq x_12 x_13;
          case x_14 : obj of
          Bool.false →
            let x_15 : obj := BinomialHeapImp.hRank._rarg x_6;
            let x_16 : u8 := Nat.decEq x_12 x_15;
            case x_16 : obj of
            Bool.false →
              let x_17 : obj := BinomialHeapImp.mergeNodes._main._at.mkHeap._spec_2 x_4 x_6;
              let x_18 : obj := ctor_1[List.cons] x_11 x_17;
              ret x_18
            Bool.true →
              let x_19 : obj := ctor_1[List.cons] x_11 x_4;
              let x_20 : obj := BinomialHeapImp.mergeNodes._main._at.mkHeap._spec_2 x_19 x_6;
              ret x_20
          Bool.true →
            let x_21 : obj := BinomialHeapImp.hRank._rarg x_6;
            let x_22 : u8 := Nat.decEq x_12 x_21;
            case x_22 : obj of
            Bool.false →
              let x_23 : obj := ctor_1[List.cons] x_11 x_6;
              let x_24 : obj := BinomialHeapImp.mergeNodes._main._at.mkHeap._spec_2 x_4 x_23;
              ret x_24
            Bool.true →
              let x_25 : obj := BinomialHeapImp.mergeNodes._main._at.mkHeap._spec_2 x_4 x_6;
              let x_26 : obj := ctor_1[List.cons] x_11 x_25;
              ret x_26
        Bool.true →
          let x_27 : obj := BinomialHeapImp.mergeNodes._main._at.mkHeap._spec_2 x_6 x_1;
          let x_28 : obj := ctor_1[List.cons] x_5 x_27;
          ret x_28
      Bool.true →
        let x_29 : obj := BinomialHeapImp.mergeNodes._main._at.mkHeap._spec_2 x_4 x_2;
        let x_30 : obj := ctor_1[List.cons] x_3 x_29;
        ret x_30
def BinomialHeapImp.merge._at.mkHeap._spec_1 (x_1 : obj) (x_2 : obj) : obj :=
  case x_1 : obj of
  BinomialHeapImp.Heap.empty →
    ret x_2
  BinomialHeapImp.Heap.heap →
    let x_3 : obj := proj[0] x_1;
    case x_2 : obj of
    BinomialHeapImp.Heap.empty →
      ret x_1
    BinomialHeapImp.Heap.heap →
      let x_4 : obj := proj[0] x_2;
      let x_5 : obj := BinomialHeapImp.mergeNodes._main._at.mkHeap._spec_2 x_3 x_4;
      let x_6 : obj := ctor_1[BinomialHeapImp.Heap.heap] x_5;
      ret x_6
def Nat.foldAux._main._at.mkHeap._spec_4 (x_1 : obj) (x_2 : obj) (x_3 : obj) (x_4 : obj) (x_5 : obj) (x_6 : obj) (x_7 : obj) : obj :=
  let x_8 : obj := 0;
  let x_9 : u8 := Nat.decEq x_6 x_8;
  case x_9 : obj of
  Bool.false →
    let x_10 : obj := 1;
    let x_11 : obj := Nat.sub x_6 x_10;
    let x_12 : obj := Nat.sub x_5 x_6;
    let x_13 : obj := Nat.mul x_1 x_2;
    let x_14 : obj := Nat.mul x_12 x_1;
    let x_15 : obj := Nat.sub x_13 x_14;
    let x_16 : obj := Nat.sub x_15 x_3;
    let x_17 : obj := BinomialHeapImp.singleton._rarg x_16;
    let x_18 : obj := BinomialHeapImp.merge._at.mkHeap._spec_1 x_17 x_7;
    let x_19 : obj := Nat.foldAux._main._at.mkHeap._spec_4 x_1 x_2 x_3 x_4 x_5 x_11 x_18;
    ret x_19
  Bool.true →
    ret x_7
def Nat.foldAux._main._at.mkHeap._spec_5._closed_1 : obj :=
  let x_1 : obj := pap Nat.decLt;
  ret x_1
def Nat.foldAux._main._at.mkHeap._spec_5 (x_1 : obj) (x_2 : obj) (x_3 : obj) (x_4 : obj) (x_5 : obj) : obj :=
  let x_6 : obj := 0;
  let x_7 : u8 := Nat.decEq x_4 x_6;
  case x_7 : obj of
  Bool.false →
    let x_8 : obj := 1;
    let x_9 : obj := Nat.sub x_4 x_8;
    let x_10 : obj := Nat.sub x_3 x_4;
    let x_11 : obj := ctor_0[BinomialHeapImp.Heap.empty];
    let x_12 : obj := Nat.foldAux._main._at.mkHeap._spec_5._closed_1;
    let x_13 : obj := Nat.foldAux._main._at.mkHeap._spec_4 x_1 x_2 x_10 x_12 x_2 x_2 x_11;
    let x_14 : obj := ctor_1[List.cons] x_13 x_5;
    let x_15 : obj := Nat.foldAux._main._at.mkHeap._spec_5 x_1 x_2 x_3 x_9 x_14;
    ret x_15
  Bool.true →
    ret x_5
def List.foldl._main._at.mkHeap._spec_6 (x_1 : obj) (x_2 : obj) : obj :=
  case x_2 : obj of
  List.nil →
    ret x_1
  List.cons →
    let x_3 : obj := proj[0] x_2;
    let x_4 : obj := proj[1] x_2;
    let x_5 : obj := BinomialHeapImp.merge._at.mkHeap._spec_1 x_1 x_3;
    let x_6 : obj := List.foldl._main._at.mkHeap._spec_6 x_5 x_4;
    ret x_6
def mkHeap (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := ctor_0[List.nil];
  let x_4 : obj := Nat.foldAux._main._at.mkHeap._spec_5 x_1 x_2 x_1 x_1 x_3;
  let x_5 : obj := ctor_0[BinomialHeapImp.Heap.empty];
  let x_6 : obj := List.foldl._main._at.mkHeap._spec_6 x_5 x_4;
  ret x_6

def List.foldl._main._at.display._main._spec_2 (x_1 : obj) (x_2 : obj) : obj :=
  case x_2 : obj of
  List.nil →
    ret x_1
  List.cons →
    let x_3 : obj := proj[0] x_2;
    let x_4 : obj := proj[1] x_2;
    let x_5 : obj := proj[0] x_3;
    let x_6 : u8 := Nat.decLt x_1 x_5;
    case x_6 : obj of
    Bool.false →
      let x_7 : obj := List.foldl._main._at.display._main._spec_2 x_5 x_4;
      ret x_7
    Bool.true →
      let x_8 : obj := List.foldl._main._at.display._main._spec_2 x_1 x_4;
      ret x_8
def BinomialHeapImp.head._at.display._main._spec_1 (x_1 : obj) : obj :=
  case x_1 : obj of
  BinomialHeapImp.Heap.empty →
    let x_2 : obj := 0;
    ret x_2
  BinomialHeapImp.Heap.heap →
    let x_3 : obj := proj[0] x_1;
    case x_3 : obj of
    List.nil →
      let x_4 : obj := 0;
      ret x_4
    List.cons →
      let x_5 : obj := proj[0] x_3;
      let x_6 : obj := proj[1] x_3;
      let x_7 : obj := proj[0] x_5;
      let x_8 : obj := List.foldl._main._at.display._main._spec_2 x_7 x_6;
      ret x_8
def display._main._closed_1 : obj :=
  let x_1 : obj := "failed ";
  ret x_1
def display._main (x_1 : obj) (x_2 : obj) (x_3 : obj) : obj :=
  let x_4 : u8 := BinomialHeapImp.isEmpty._rarg x_2;
  case x_4 : obj of
  Bool.false →
    let x_5 : obj := BinomialHeapImp.head._at.display._main._spec_1 x_2;
    let x_6 : u8 := Nat.decLt x_1 x_5;
    case x_6 : obj of
    Bool.false →
      let x_7 : obj := Nat.repr x_1;
      let x_8 : obj := display._main._closed_1;
      let x_9 : obj := String.append x_8 x_7;
      let x_10 : obj := String.Iterator.HasRepr._closed_2;
      let x_11 : obj := String.append x_9 x_10;
      let x_12 : obj := Nat.repr x_5;
      let x_13 : obj := String.append x_11 x_12;
      let x_14 : obj := IO.println._at.Lean.HasRepr.HasEval._spec_1 x_13 x_3;
      case x_14 : obj of
      EStateM.Result.ok →
        let x_15 : obj := proj[1] x_14;
        let x_16 : obj := Nat.foldAux._main._at.mkHeap._spec_5._closed_1;
        let x_17 : obj := BinomialHeapImp.tail._rarg x_16 x_2;
        let x_18 : obj := display._main x_5 x_17 x_15;
        ret x_18
      EStateM.Result.error →
        let x_19 : obj := proj[0] x_14;
        let x_20 : obj := proj[1] x_14;
        let x_21 : obj := ctor_1[EStateM.Result.error] x_19 x_20;
        ret x_21
    Bool.true →
      let x_22 : obj := Nat.foldAux._main._at.mkHeap._spec_5._closed_1;
      let x_23 : obj := BinomialHeapImp.tail._rarg x_22 x_2;
      let x_24 : obj := display._main x_5 x_23 x_3;
      ret x_24
  Bool.true →
    let x_25 : obj := ctor_0[PUnit.unit];
    let x_26 : obj := ctor_0[EStateM.Result.ok] x_25 x_3;
    ret x_26

def display (x_1 : obj) (x_2 : obj) (x_3 : obj) : obj :=
  let x_4 : obj := display._main x_1 x_2 x_3;
  ret x_4

def IO.print._at.main._spec_2 (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := Nat.repr x_1;
  let x_4 : obj := IO.Prim.putStr x_3 x_2;
  ret x_4
def IO.println._at.main._spec_1 (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := IO.print._at.main._spec_2 x_1 x_2;
  case x_3 : obj of
  EStateM.Result.ok →
    let x_4 : obj := proj[1] x_3;
    let x_5 : obj := IO.println._rarg._closed_1;
    let x_6 : obj := IO.Prim.putStr x_5 x_4;
    ret x_6
  EStateM.Result.error →
    let x_7 : obj := proj[0] x_3;
    let x_8 : obj := proj[1] x_3;
    let x_9 : obj := ctor_1[EStateM.Result.error] x_7 x_8;
    ret x_9
def main._closed_1 : obj :=
  let x_1 : obj := 20;
  let x_2 : obj := mkHeap x_1 x_1;
  ret x_2
def main._closed_2 : obj :=
  let x_1 : obj := Nat.foldAux._main._at.mkHeap._spec_5._closed_1;
  let x_2 : obj := main._closed_1;
  let x_3 : obj := BinomialHeapImp.toList._main._rarg x_1 x_2;
  ret x_3
def main._closed_3 : obj :=
  let x_1 : obj := main._closed_2;
  let x_2 : obj := 0;
  let x_3 : obj := List.lengthAux._main._rarg x_1 x_2;
  ret x_3
def main (x_1 : obj) : obj :=
  let x_2 : obj := 0;
  let x_3 : obj := main._closed_1;
  let x_4 : obj := display._main x_2 x_3 x_1;
  case x_4 : obj of
  EStateM.Result.ok →
    let x_5 : obj := proj[1] x_4;
    let x_6 : obj := main._closed_3;
    let x_7 : obj := IO.println._at.main._spec_1 x_6 x_5;
    ret x_7
  EStateM.Result.error →
    let x_8 : obj := proj[0] x_4;
    let x_9 : obj := proj[1] x_4;
    let x_10 : obj := ctor_1[EStateM.Result.error] x_8 x_9;
    ret x_10