

def L.Inhabited : obj :=
  let x_1 : obj := ctor_0[L.Nil];
  ret x_1

def map._main (x_1 : obj) (x_2 : obj) : obj :=
  case x_2 : obj of
  L.Nil →
    ret x_2
  L.Cons →
    let x_3 : obj := proj[0] x_2;
    let x_4 : obj := proj[1] x_2;
    let x_5 : obj := app x_1 x_3;
    let x_6 : obj := map._main x_1 x_4;
    let x_7 : obj := ctor_1[L.Cons] x_5 x_6;
    ret x_7

def map (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := map._main x_1 x_2;
  ret x_3

def add_one (x_1 : obj) : obj :=
  let x_2 : obj := 1;
  let x_3 : obj := Nat.add x_1 x_2;
  ret x_3



def make'._main (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := 0;
  let x_4 : u8 := Nat.decEq x_2 x_3;
  case x_4 : obj of
  Bool.false →
    let x_5 : obj := Nat.sub x_1 x_2;
    let x_6 : obj := 1;
    let x_7 : obj := Nat.sub x_2 x_6;
    let x_8 : obj := make'._main x_1 x_7;
    let x_9 : obj := ctor_1[L.Cons] x_5 x_8;
    ret x_9
  Bool.true →
    let x_10 : obj := ctor_0[L.Nil];
    let x_11 : obj := ctor_1[L.Cons] x_1 x_10;
    ret x_11

def make' (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := make'._main x_1 x_2;
  ret x_3

def make (x_1 : obj) : obj :=
  let x_2 : obj := make'._main x_1 x_1;
  ret x_2

def sum._main (x_1 : obj) : obj :=
  case x_1 : obj of
  L.Nil →
    let x_2 : obj := 0;
    ret x_2
  L.Cons →
    let x_3 : obj := proj[0] x_1;
    let x_4 : obj := proj[1] x_1;
    let x_5 : obj := sum._main x_4;
    let x_6 : obj := Nat.add x_3 x_5;
    ret x_6

def sum (x_1 : obj) : obj :=
  let x_2 : obj := sum._main x_1;
  ret x_2

def IO.print._at.main._spec_2 (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := Nat.repr x_1;
  let x_4 : obj := IO.Prim.putStr x_3 x_2;
  ret x_4
def IO.println._at.main._spec_1 (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := IO.print._at.main._spec_2 x_1 x_2;
  case x_3 : obj of
  EStateM.Result.ok →
    let x_4 : obj := proj[1] x_3;
    let x_5 : obj := IO.println._rarg._closed_1;
    let x_6 : obj := IO.Prim.putStr x_5 x_4;
    ret x_6
  EStateM.Result.error →
    let x_7 : obj := proj[0] x_3;
    let x_8 : obj := proj[1] x_3;
    let x_9 : obj := ctor_1[EStateM.Result.error] x_7 x_8;
    ret x_9
def main._closed_1 : obj :=
  let x_1 : obj := 10000000;
  let x_2 : obj := make'._main x_1 x_1;
  ret x_2
def main._closed_2 : obj :=
  let x_1 : obj := pap add_one;
  ret x_1
def main._closed_3 : obj :=
  let x_1 : obj := main._closed_2;
  let x_2 : obj := main._closed_1;
  let x_3 : obj := map._main x_1 x_2;
  ret x_3
def main._closed_4 : obj :=
  let x_1 : obj := main._closed_3;
  let x_2 : obj := sum._main x_1;
  ret x_2
def main (x_1 : obj) (x_2 : obj) : obj :=
  let x_3 : obj := main._closed_4;
  let x_4 : obj := IO.println._at.main._spec_1 x_3 x_2;
  case x_4 : obj of
  EStateM.Result.ok →
    let x_5 : obj := proj[1] x_4;
    let x_6 : u32 := 0;
    let x_7 : obj := ctor_0[EStateM.Result.ok] x_6 x_5;
    ret x_7
  EStateM.Result.error →
    let x_8 : obj := proj[0] x_4;
    let x_9 : obj := proj[1] x_4;
    let x_10 : obj := ctor_1[EStateM.Result.error] x_8 x_9;
    ret x_10
